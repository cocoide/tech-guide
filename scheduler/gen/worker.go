// Code generated by MockGen. DO NOT EDIT.
// Source: worker.go
//
// Generated by this command:
//
//	mockgen -source=worker.go -destination=./gen/worker.go
//
// Package mock_scheduler is a generated GoMock package.
package mock_scheduler

import (
	reflect "reflect"

	scheduler "github.com/cocoide/tech-guide/scheduler"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkerService is a mock of WorkerService interface.
type MockWorkerService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerServiceMockRecorder
}

// MockWorkerServiceMockRecorder is the mock recorder for MockWorkerService.
type MockWorkerServiceMockRecorder struct {
	mock *MockWorkerService
}

// NewMockWorkerService creates a new mock instance.
func NewMockWorkerService(ctrl *gomock.Controller) *MockWorkerService {
	mock := &MockWorkerService{ctrl: ctrl}
	mock.recorder = &MockWorkerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerService) EXPECT() *MockWorkerServiceMockRecorder {
	return m.recorder
}

// ExecuteWorker mocks base method.
func (m *MockWorkerService) ExecuteWorker(id scheduler.WorkerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWorker", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteWorker indicates an expected call of ExecuteWorker.
func (mr *MockWorkerServiceMockRecorder) ExecuteWorker(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWorker", reflect.TypeOf((*MockWorkerService)(nil).ExecuteWorker), id)
}
