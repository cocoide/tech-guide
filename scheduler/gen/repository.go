// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=./gen/repository.go
//
// Package mock_scheduler is a generated GoMock package.
package mock_scheduler

import (
	reflect "reflect"

	scheduler "github.com/cocoide/tech-guide/scheduler"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetJobSetting mocks base method.
func (m *MockRepository) GetJobSetting(status scheduler.JobStatus) (scheduler.JobSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSetting", status)
	ret0, _ := ret[0].(scheduler.JobSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSetting indicates an expected call of GetJobSetting.
func (mr *MockRepositoryMockRecorder) GetJobSetting(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSetting", reflect.TypeOf((*MockRepository)(nil).GetJobSetting), status)
}

// UpdateJobStatus mocks base method.
func (m *MockRepository) UpdateJobStatus(workerID scheduler.WorkerID, status scheduler.JobStatus) (*scheduler.JobSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", workerID, status)
	ret0, _ := ret[0].(*scheduler.JobSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockRepositoryMockRecorder) UpdateJobStatus(workerID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockRepository)(nil).UpdateJobStatus), workerID, status)
}
