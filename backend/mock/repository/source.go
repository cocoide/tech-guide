// Code generated by MockGen. DO NOT EDIT.
// Source: source.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/cocoide/tech-guide/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockSourceRepo is a mock of SourceRepo interface.
type MockSourceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSourceRepoMockRecorder
}

// MockSourceRepoMockRecorder is the mock recorder for MockSourceRepo.
type MockSourceRepoMockRecorder struct {
	mock *MockSourceRepo
}

// NewMockSourceRepo creates a new mock instance.
func NewMockSourceRepo(ctrl *gomock.Controller) *MockSourceRepo {
	mock := &MockSourceRepo{ctrl: ctrl}
	mock.recorder = &MockSourceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceRepo) EXPECT() *MockSourceRepoMockRecorder {
	return m.recorder
}

// DoFollowSource mocks base method.
func (m *MockSourceRepo) DoFollowSource(accountID, souceID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoFollowSource", accountID, souceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoFollowSource indicates an expected call of DoFollowSource.
func (mr *MockSourceRepoMockRecorder) DoFollowSource(accountID, souceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoFollowSource", reflect.TypeOf((*MockSourceRepo)(nil).DoFollowSource), accountID, souceID)
}

// FindIDByDomain mocks base method.
func (m *MockSourceRepo) FindIDByDomain(domain string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIDByDomain", domain)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIDByDomain indicates an expected call of FindIDByDomain.
func (mr *MockSourceRepoMockRecorder) FindIDByDomain(domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIDByDomain", reflect.TypeOf((*MockSourceRepo)(nil).FindIDByDomain), domain)
}

// GetAllSources mocks base method.
func (m *MockSourceRepo) GetAllSources() ([]model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSources")
	ret0, _ := ret[0].([]model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSources indicates an expected call of GetAllSources.
func (mr *MockSourceRepoMockRecorder) GetAllSources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSources", reflect.TypeOf((*MockSourceRepo)(nil).GetAllSources))
}

// GetFollowingSourceIDs mocks base method.
func (m *MockSourceRepo) GetFollowingSourceIDs(accountID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowingSourceIDs", accountID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowingSourceIDs indicates an expected call of GetFollowingSourceIDs.
func (mr *MockSourceRepoMockRecorder) GetFollowingSourceIDs(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowingSourceIDs", reflect.TypeOf((*MockSourceRepo)(nil).GetFollowingSourceIDs), accountID)
}

// GetFollowingSources mocks base method.
func (m *MockSourceRepo) GetFollowingSources(accountId int) ([]model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowingSources", accountId)
	ret0, _ := ret[0].([]model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowingSources indicates an expected call of GetFollowingSources.
func (mr *MockSourceRepoMockRecorder) GetFollowingSources(accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowingSources", reflect.TypeOf((*MockSourceRepo)(nil).GetFollowingSources), accountId)
}

// GetPopularSources mocks base method.
func (m *MockSourceRepo) GetPopularSources(limit int) ([]model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopularSources", limit)
	ret0, _ := ret[0].([]model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopularSources indicates an expected call of GetPopularSources.
func (mr *MockSourceRepoMockRecorder) GetPopularSources(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopularSources", reflect.TypeOf((*MockSourceRepo)(nil).GetPopularSources), limit)
}

// GetSourceData mocks base method.
func (m *MockSourceRepo) GetSourceData(sourceID int) (*model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceData", sourceID)
	ret0, _ := ret[0].(*model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceData indicates an expected call of GetSourceData.
func (mr *MockSourceRepoMockRecorder) GetSourceData(sourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceData", reflect.TypeOf((*MockSourceRepo)(nil).GetSourceData), sourceID)
}

// IsFollowingSource mocks base method.
func (m *MockSourceRepo) IsFollowingSource(accountID, sourceID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollowingSource", accountID, sourceID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFollowingSource indicates an expected call of IsFollowingSource.
func (mr *MockSourceRepoMockRecorder) IsFollowingSource(accountID, sourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollowingSource", reflect.TypeOf((*MockSourceRepo)(nil).IsFollowingSource), accountID, sourceID)
}

// UnFollowSource mocks base method.
func (m *MockSourceRepo) UnFollowSource(accountID, sourceID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnFollowSource", accountID, sourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnFollowSource indicates an expected call of UnFollowSource.
func (mr *MockSourceRepoMockRecorder) UnFollowSource(accountID, sourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnFollowSource", reflect.TypeOf((*MockSourceRepo)(nil).UnFollowSource), accountID, sourceID)
}
