// Code generated by MockGen. DO NOT EDIT.
// Source: collection.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/cocoide/tech-guide/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockCollectionRepo is a mock of CollectionRepo interface.
type MockCollectionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionRepoMockRecorder
}

// MockCollectionRepoMockRecorder is the mock recorder for MockCollectionRepo.
type MockCollectionRepoMockRecorder struct {
	mock *MockCollectionRepo
}

// NewMockCollectionRepo creates a new mock instance.
func NewMockCollectionRepo(ctrl *gomock.Controller) *MockCollectionRepo {
	mock := &MockCollectionRepo{ctrl: ctrl}
	mock.recorder = &MockCollectionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionRepo) EXPECT() *MockCollectionRepoMockRecorder {
	return m.recorder
}

// CreateBookmark mocks base method.
func (m *MockCollectionRepo) CreateBookmark(bookmark *model.Bookmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookmark", bookmark)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBookmark indicates an expected call of CreateBookmark.
func (mr *MockCollectionRepoMockRecorder) CreateBookmark(bookmark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmark", reflect.TypeOf((*MockCollectionRepo)(nil).CreateBookmark), bookmark)
}

// CreateCollection mocks base method.
func (m *MockCollectionRepo) CreateCollection(collection *model.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollection", collection)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockCollectionRepoMockRecorder) CreateCollection(collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockCollectionRepo)(nil).CreateCollection), collection)
}

// CreateCollectionWithBookmark mocks base method.
func (m *MockCollectionRepo) CreateCollectionWithBookmark(collectino *model.Collection, articleId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollectionWithBookmark", collectino, articleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCollectionWithBookmark indicates an expected call of CreateCollectionWithBookmark.
func (mr *MockCollectionRepoMockRecorder) CreateCollectionWithBookmark(collectino, articleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionWithBookmark", reflect.TypeOf((*MockCollectionRepo)(nil).CreateCollectionWithBookmark), collectino, articleId)
}

// GetCollectionAuthorID mocks base method.
func (m *MockCollectionRepo) GetCollectionAuthorID(collectionId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionAuthorID", collectionId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionAuthorID indicates an expected call of GetCollectionAuthorID.
func (mr *MockCollectionRepoMockRecorder) GetCollectionAuthorID(collectionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionAuthorID", reflect.TypeOf((*MockCollectionRepo)(nil).GetCollectionAuthorID), collectionId)
}

// GetCollectionByID mocks base method.
func (m *MockCollectionRepo) GetCollectionByID(id int) (*model.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionByID", id)
	ret0, _ := ret[0].(*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionByID indicates an expected call of GetCollectionByID.
func (mr *MockCollectionRepoMockRecorder) GetCollectionByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionByID", reflect.TypeOf((*MockCollectionRepo)(nil).GetCollectionByID), id)
}

// GetCollectionsByAccountID mocks base method.
func (m *MockCollectionRepo) GetCollectionsByAccountID(accountId int) ([]*model.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionsByAccountID", accountId)
	ret0, _ := ret[0].([]*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionsByAccountID indicates an expected call of GetCollectionsByAccountID.
func (mr *MockCollectionRepoMockRecorder) GetCollectionsByAccountID(accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionsByAccountID", reflect.TypeOf((*MockCollectionRepo)(nil).GetCollectionsByAccountID), accountId)
}
