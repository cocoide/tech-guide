// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/article.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/cocoide/tech-guide/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockArticleRepo is a mock of ArticleRepo interface.
type MockArticleRepo struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepoMockRecorder
}

// MockArticleRepoMockRecorder is the mock recorder for MockArticleRepo.
type MockArticleRepoMockRecorder struct {
	mock *MockArticleRepo
}

// NewMockArticleRepo creates a new mock instance.
func NewMockArticleRepo(ctrl *gomock.Controller) *MockArticleRepo {
	mock := &MockArticleRepo{ctrl: ctrl}
	mock.recorder = &MockArticleRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleRepo) EXPECT() *MockArticleRepoMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockArticleRepo) BatchCreate(articles []*model.Article) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", articles)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockArticleRepoMockRecorder) BatchCreate(articles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockArticleRepo)(nil).BatchCreate), articles)
}

// CheckArticleExistsByURL mocks base method.
func (m *MockArticleRepo) CheckArticleExistsByURL(url string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckArticleExistsByURL", url)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckArticleExistsByURL indicates an expected call of CheckArticleExistsByURL.
func (mr *MockArticleRepoMockRecorder) CheckArticleExistsByURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckArticleExistsByURL", reflect.TypeOf((*MockArticleRepo)(nil).CheckArticleExistsByURL), url)
}

// Create mocks base method.
func (m *MockArticleRepo) Create(article *model.Article) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", article)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockArticleRepoMockRecorder) Create(article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleRepo)(nil).Create), article)
}

// CreateTopicToArticle mocks base method.
func (m *MockArticleRepo) CreateTopicToArticle(topicToArticles []model.TopicsToArticles) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopicToArticle", topicToArticles)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopicToArticle indicates an expected call of CreateTopicToArticle.
func (mr *MockArticleRepoMockRecorder) CreateTopicToArticle(topicToArticles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicToArticle", reflect.TypeOf((*MockArticleRepo)(nil).CreateTopicToArticle), topicToArticles)
}

// GetArticleByID mocks base method.
func (m *MockArticleRepo) GetArticleByID(articleID int) (*model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleByID", articleID)
	ret0, _ := ret[0].(*model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleByID indicates an expected call of GetArticleByID.
func (mr *MockArticleRepoMockRecorder) GetArticleByID(articleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleByID", reflect.TypeOf((*MockArticleRepo)(nil).GetArticleByID), articleID)
}

// GetArticleIDByURL mocks base method.
func (m *MockArticleRepo) GetArticleIDByURL(url string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleIDByURL", url)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleIDByURL indicates an expected call of GetArticleIDByURL.
func (mr *MockArticleRepoMockRecorder) GetArticleIDByURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleIDByURL", reflect.TypeOf((*MockArticleRepo)(nil).GetArticleIDByURL), url)
}

// GetArticlesByIDs mocks base method.
func (m *MockArticleRepo) GetArticlesByIDs(articleIDs []int) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticlesByIDs", articleIDs)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticlesByIDs indicates an expected call of GetArticlesByIDs.
func (mr *MockArticleRepoMockRecorder) GetArticlesByIDs(articleIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticlesByIDs", reflect.TypeOf((*MockArticleRepo)(nil).GetArticlesByIDs), articleIDs)
}

// GetArticlesByTopicIDs mocks base method.
func (m *MockArticleRepo) GetArticlesByTopicIDs(topicIDs []int, omitArticleId int) ([]model.TopicsToArticles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticlesByTopicIDs", topicIDs, omitArticleId)
	ret0, _ := ret[0].([]model.TopicsToArticles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticlesByTopicIDs indicates an expected call of GetArticlesByTopicIDs.
func (mr *MockArticleRepoMockRecorder) GetArticlesByTopicIDs(topicIDs, omitArticleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticlesByTopicIDs", reflect.TypeOf((*MockArticleRepo)(nil).GetArticlesByTopicIDs), topicIDs, omitArticleId)
}

// GetLatestArticleByLimit mocks base method.
func (m *MockArticleRepo) GetLatestArticleByLimit(limit int) ([]*model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestArticleByLimit", limit)
	ret0, _ := ret[0].([]*model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestArticleByLimit indicates an expected call of GetLatestArticleByLimit.
func (mr *MockArticleRepoMockRecorder) GetLatestArticleByLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestArticleByLimit", reflect.TypeOf((*MockArticleRepo)(nil).GetLatestArticleByLimit), limit)
}

// GetTagsAndWeightsByArticleID mocks base method.
func (m *MockArticleRepo) GetTagsAndWeightsByArticleID(articleID int) ([]model.TopicsToArticles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsAndWeightsByArticleID", articleID)
	ret0, _ := ret[0].([]model.TopicsToArticles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsAndWeightsByArticleID indicates an expected call of GetTagsAndWeightsByArticleID.
func (mr *MockArticleRepoMockRecorder) GetTagsAndWeightsByArticleID(articleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsAndWeightsByArticleID", reflect.TypeOf((*MockArticleRepo)(nil).GetTagsAndWeightsByArticleID), articleID)
}

// GetTopicsByID mocks base method.
func (m *MockArticleRepo) GetTopicsByID(articleId int) ([]model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicsByID", articleId)
	ret0, _ := ret[0].([]model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicsByID indicates an expected call of GetTopicsByID.
func (mr *MockArticleRepoMockRecorder) GetTopicsByID(articleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicsByID", reflect.TypeOf((*MockArticleRepo)(nil).GetTopicsByID), articleId)
}
