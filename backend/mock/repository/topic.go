// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/topic.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	time "time"

	model "github.com/cocoide/tech-guide/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTopicRepo is a mock of TopicRepo interface.
type MockTopicRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTopicRepoMockRecorder
}

// MockTopicRepoMockRecorder is the mock recorder for MockTopicRepo.
type MockTopicRepoMockRecorder struct {
	mock *MockTopicRepo
}

// NewMockTopicRepo creates a new mock instance.
func NewMockTopicRepo(ctrl *gomock.Controller) *MockTopicRepo {
	mock := &MockTopicRepo{ctrl: ctrl}
	mock.recorder = &MockTopicRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicRepo) EXPECT() *MockTopicRepoMockRecorder {
	return m.recorder
}

// CreateTopics mocks base method.
func (m *MockTopicRepo) CreateTopics(topics []model.Topic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopics", topics)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopics indicates an expected call of CreateTopics.
func (mr *MockTopicRepoMockRecorder) CreateTopics(topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopics", reflect.TypeOf((*MockTopicRepo)(nil).CreateTopics), topics)
}

// GetAllTopics mocks base method.
func (m *MockTopicRepo) GetAllTopics() ([]model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTopics")
	ret0, _ := ret[0].([]model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTopics indicates an expected call of GetAllTopics.
func (mr *MockTopicRepoMockRecorder) GetAllTopics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTopics", reflect.TypeOf((*MockTopicRepo)(nil).GetAllTopics))
}

// GetRecentPopularArticleIDs mocks base method.
func (m *MockTopicRepo) GetRecentPopularArticleIDs(duration time.Duration, limit int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentPopularArticleIDs", duration, limit)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentPopularArticleIDs indicates an expected call of GetRecentPopularArticleIDs.
func (mr *MockTopicRepoMockRecorder) GetRecentPopularArticleIDs(duration, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentPopularArticleIDs", reflect.TypeOf((*MockTopicRepo)(nil).GetRecentPopularArticleIDs), duration, limit)
}

// GetTopicToArticleArrayByArticleID mocks base method.
func (m *MockTopicRepo) GetTopicToArticleArrayByArticleID(articleID int) ([]model.TopicsToArticles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicToArticleArrayByArticleID", articleID)
	ret0, _ := ret[0].([]model.TopicsToArticles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicToArticleArrayByArticleID indicates an expected call of GetTopicToArticleArrayByArticleID.
func (mr *MockTopicRepoMockRecorder) GetTopicToArticleArrayByArticleID(articleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicToArticleArrayByArticleID", reflect.TypeOf((*MockTopicRepo)(nil).GetTopicToArticleArrayByArticleID), articleID)
}
